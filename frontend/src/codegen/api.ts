/* tslint:disable */
/* eslint-disable */
/**
 * AnyEmailFinder API
 * AnyEmailFinder API Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ChannelPageableResponse
 */
export interface ChannelPageableResponse {
    /**
     * 
     * @type {number}
     * @memberof ChannelPageableResponse
     */
    count: number;
    /**
     * 
     * @type {Array<YouTubeChannelDetail>}
     * @memberof ChannelPageableResponse
     */
    records: Array<YouTubeChannelDetail>;
}
/**
 * 
 * @export
 * @interface DashboardData
 */
export interface DashboardData {
    /**
     * 
     * @type {number}
     * @memberof DashboardData
     */
    all_emails?: number;
}
/**
 * 
 * @export
 * @interface EmailSearchResult
 */
export interface EmailSearchResult {
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    first_name?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    last_name?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    keywords?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    phone_number?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    job_title?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    gender?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    industry?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    company_name?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    website?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    linkedin_profile?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    age?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    company_size?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmailSearchResult
     */
    verified?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmailSearchResult
     */
    thumbnail?: string;
}
/**
 * 
 * @export
 * @interface EmailSearchResults
 */
export interface EmailSearchResults {
    /**
     * 
     * @type {Array<EmailSearchResult>}
     * @memberof EmailSearchResults
     */
    results?: Array<EmailSearchResult>;
}
/**
 * 
 * @export
 * @interface GenericResponse
 */
export interface GenericResponse {
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface PageableRequest
 */
export interface PageableRequest {
    /**
     * 
     * @type {string}
     * @memberof PageableRequest
     */
    query?: string;
    /**
     * 
     * @type {number}
     * @memberof PageableRequest
     */
    limit: number;
    /**
     * 
     * @type {number}
     * @memberof PageableRequest
     */
    page_num: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof PageableRequest
     */
    sortBy?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PageableRequest
     */
    sortDir?: Array<string>;
}
/**
 * 
 * @export
 * @interface SubmitQueryRequest
 */
export interface SubmitQueryRequest {
    /**
     * 
     * @type {string}
     * @memberof SubmitQueryRequest
     */
    query?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubmitQueryRequest
     */
    webpage_only?: boolean;
}
/**
 * 
 * @export
 * @interface TaskId
 */
export interface TaskId {
    /**
     * 
     * @type {string}
     * @memberof TaskId
     */
    task_id?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskId
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    user_id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    picture?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    api_key?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserProfile
     */
    anonymous?: boolean;
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof UserProfile
     */
    roles?: { [key: string]: boolean; };
    /**
     * 
     * @type {boolean}
     * @memberof UserProfile
     */
    is_authorized?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    auth_mode?: string;
    /**
     * 
     * @type {DashboardData}
     * @memberof UserProfile
     */
    dashboard_data?: DashboardData;
}
/**
 * 
 * @export
 * @interface UserProfileResponse
 */
export interface UserProfileResponse {
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponse
     */
    error?: string;
    /**
     * 
     * @type {UserProfile}
     * @memberof UserProfileResponse
     */
    profile?: UserProfile;
}
/**
 * 
 * @export
 * @interface WebsocketPayload
 */
export interface WebsocketPayload {
    /**
     * 
     * @type {string}
     * @memberof WebsocketPayload
     */
    type?: string;
    /**
     * 
     * @type {object}
     * @memberof WebsocketPayload
     */
    data?: object;
}
/**
 * 
 * @export
 * @interface YouTubeChannelDetail
 */
export interface YouTubeChannelDetail {
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    query?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    first_name?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    last_name?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    facebook?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    keywords?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    channel_url?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    channel_name?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    channel_handle?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    subscribers?: string;
    /**
     * 
     * @type {number}
     * @memberof YouTubeChannelDetail
     */
    subscribers_value?: number;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    instagram?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    twitter?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    website?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    blog?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    snap_chat?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    discord?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    tiktok?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    pinterest?: string;
}

/**
 * LeadApi - axios parameter creator
 * @export
 */
export const LeadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all leads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserLeads: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/leads/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get channel query result
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelQueryResult: async (jobId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getChannelQueryResult', 'jobId', jobId)
            const localVarPath = `/lead/youtube/channels/result`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobId !== undefined) {
                localVarQueryParameter['job_id'] = jobId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submit search query
         * @param {SubmitQueryRequest} submitQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitSearchQuery: async (submitQueryRequest: SubmitQueryRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'submitQueryRequest' is not null or undefined
            assertParamExists('submitSearchQuery', 'submitQueryRequest', submitQueryRequest)
            const localVarPath = `/leads/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeadApi - functional programming interface
 * @export
 */
export const LeadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeadApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all leads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserLeads(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserLeads(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get channel query result
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelQueryResult(jobId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelPageableResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChannelQueryResult(jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Submit search query
         * @param {SubmitQueryRequest} submitQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitSearchQuery(submitQueryRequest: SubmitQueryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitSearchQuery(submitQueryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeadApi - factory interface
 * @export
 */
export const LeadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeadApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all leads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserLeads(options?: any): AxiosPromise<EmailSearchResults> {
            return localVarFp.getAllUserLeads(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get channel query result
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelQueryResult(jobId: string, options?: any): AxiosPromise<ChannelPageableResponse> {
            return localVarFp.getChannelQueryResult(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submit search query
         * @param {SubmitQueryRequest} submitQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitSearchQuery(submitQueryRequest: SubmitQueryRequest, options?: any): AxiosPromise<TaskId> {
            return localVarFp.submitSearchQuery(submitQueryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LeadApi - object-oriented interface
 * @export
 * @class LeadApi
 * @extends {BaseAPI}
 */
export class LeadApi extends BaseAPI {
    /**
     * 
     * @summary Get all leads
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadApi
     */
    public getAllUserLeads(options?: any) {
        return LeadApiFp(this.configuration).getAllUserLeads(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get channel query result
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadApi
     */
    public getChannelQueryResult(jobId: string, options?: any) {
        return LeadApiFp(this.configuration).getChannelQueryResult(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submit search query
     * @param {SubmitQueryRequest} submitQueryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadApi
     */
    public submitSearchQuery(submitQueryRequest: SubmitQueryRequest, options?: any) {
        return LeadApiFp(this.configuration).submitSearchQuery(submitQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofile: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserprofile(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserprofile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofile(options?: any): AxiosPromise<UserProfileResponse> {
            return localVarFp.getUserprofile(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Get user profile or create one if it doesn\'t exist
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserprofile(options?: any) {
        return UserApiFp(this.configuration).getUserprofile(options).then((request) => request(this.axios, this.basePath));
    }
}


