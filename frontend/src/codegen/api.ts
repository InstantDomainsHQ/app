/* tslint:disable */
/* eslint-disable */
/**
 * InstantDomains API
 * InstantDomains API Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface DomainWhoIs
 */
export interface DomainWhoIs {
    /**
     * 
     * @type {string}
     * @memberof DomainWhoIs
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainWhoIs
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainWhoIs
     */
    tld?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DomainWhoIs
     */
    is_available?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DomainWhoIs
     */
    expires_at?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainWhoIs
     */
    registered_at?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainWhoIs
     */
    whois_url?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainWhoIs
     */
    price?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainWhoIs
     */
    affiliate_link?: string;
}
/**
 * 
 * @export
 * @interface GenerateRequest
 */
export interface GenerateRequest {
    /**
     * 
     * @type {string}
     * @memberof GenerateRequest
     */
    query?: string;
}
/**
 * 
 * @export
 * @interface GenericResponse
 */
export interface GenericResponse {
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface PageableRequest
 */
export interface PageableRequest {
    /**
     * 
     * @type {string}
     * @memberof PageableRequest
     */
    query?: string;
    /**
     * 
     * @type {number}
     * @memberof PageableRequest
     */
    limit: number;
    /**
     * 
     * @type {number}
     * @memberof PageableRequest
     */
    page_num: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof PageableRequest
     */
    sortBy?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PageableRequest
     */
    sortDir?: Array<string>;
}
/**
 * 
 * @export
 * @interface TaskId
 */
export interface TaskId {
    /**
     * 
     * @type {string}
     * @memberof TaskId
     */
    task_id?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskId
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface TldResponse
 */
export interface TldResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof TldResponse
     */
    tlds?: Array<string>;
}
/**
 * 
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    user_id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    picture?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    api_key?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserProfile
     */
    anonymous?: boolean;
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof UserProfile
     */
    roles?: { [key: string]: boolean; };
    /**
     * 
     * @type {boolean}
     * @memberof UserProfile
     */
    is_authorized?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    auth_mode?: string;
}
/**
 * 
 * @export
 * @interface UserProfileResponse
 */
export interface UserProfileResponse {
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponse
     */
    error?: string;
    /**
     * 
     * @type {UserProfile}
     * @memberof UserProfileResponse
     */
    profile?: UserProfile;
}
/**
 * 
 * @export
 * @interface WebsocketPayload
 */
export interface WebsocketPayload {
    /**
     * 
     * @type {string}
     * @memberof WebsocketPayload
     */
    type?: string;
    /**
     * 
     * @type {object}
     * @memberof WebsocketPayload
     */
    data?: object;
}

/**
 * DomainApi - axios parameter creator
 * @export
 */
export const DomainApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generate domains
         * @param {GenerateRequest} generateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDomains: async (generateRequest: GenerateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'generateRequest' is not null or undefined
            assertParamExists('generateDomains', 'generateRequest', generateRequest)
            const localVarPath = `/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all supported tlds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTlds: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tlds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainApi - functional programming interface
 * @export
 */
export const DomainApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DomainApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generate domains
         * @param {GenerateRequest} generateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateDomains(generateRequest: GenerateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateDomains(generateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all supported tlds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTlds(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TldResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTlds(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DomainApi - factory interface
 * @export
 */
export const DomainApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DomainApiFp(configuration)
    return {
        /**
         * 
         * @summary Generate domains
         * @param {GenerateRequest} generateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDomains(generateRequest: GenerateRequest, options?: any): AxiosPromise<TaskId> {
            return localVarFp.generateDomains(generateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all supported tlds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTlds(options?: any): AxiosPromise<TldResponse> {
            return localVarFp.getTlds(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DomainApi - object-oriented interface
 * @export
 * @class DomainApi
 * @extends {BaseAPI}
 */
export class DomainApi extends BaseAPI {
    /**
     * 
     * @summary Generate domains
     * @param {GenerateRequest} generateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public generateDomains(generateRequest: GenerateRequest, options?: any) {
        return DomainApiFp(this.configuration).generateDomains(generateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all supported tlds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public getTlds(options?: any) {
        return DomainApiFp(this.configuration).getTlds(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofile: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserprofile(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserprofile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofile(options?: any): AxiosPromise<UserProfileResponse> {
            return localVarFp.getUserprofile(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Get user profile or create one if it doesn\'t exist
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserprofile(options?: any) {
        return UserApiFp(this.configuration).getUserprofile(options).then((request) => request(this.axios, this.basePath));
    }
}


